// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace HttpClientCode
{
    using Fiddler;
    using System;
    
    
    #line 1 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class GenerateCode : GenerateCodeBase
    {
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write("\r\n\r\n\r\nvar uriBuilder = new UriBuilder(\"");
            
            #line 10 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"
 Write(uri); 
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 10 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"
 Write(host);
            
            #line default
            #line hidden
            this.Write("\");\r\nvar httpClient = new HttpClient();\r\n\r\n");
            
            #line 13 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"

	if(httpmethod.ToUpper()=="GET")
    {

            
            #line default
            #line hidden
            this.Write("var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uriBuilder.ToStri" +
                    "ng());\r\n");
            
            #line 18 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"
 
	} 

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 22 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"

	if(httpmethod.ToUpper()=="POST")
    {

            
            #line default
            #line hidden
            this.Write("var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uriBuilder.ToStr" +
                    "ing());\r\n");
            
            #line 27 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"
 
	} 

            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n");
            
            #line 33 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"

    foreach (var item in headers)
    {

            
            #line default
            #line hidden
            this.Write("\t\t httpRequestMessage.Headers.Add(\"");
            
            #line 37 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"
 Write(item.Key.ToString()); 
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 37 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"
 Write(item.Value.ToString()); 
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 38 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n\r\nvar httpResponseMessage = httpClient.SendAsync(httpRequestMessage).Result;\r\n\r" +
                    "\nvar httpContent = httpResponseMessage.Content;\r\nstring result = httpResponseMes" +
                    "sage.Content.ReadAsStringAsync().Result;\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "E:\MyProjects\FiddlerGenerateHttpClientCode\SrcCode\HttpClientCode\HttpClientCode\GenerateCode.tt"

private string _uriField;

/// <summary>
/// Access the uri parameter of the template.
/// </summary>
private string uri
{
    get
    {
        return this._uriField;
    }
}

private string _hostField;

/// <summary>
/// Access the host parameter of the template.
/// </summary>
private string host
{
    get
    {
        return this._hostField;
    }
}

private string _httpmethodField;

/// <summary>
/// Access the httpmethod parameter of the template.
/// </summary>
private string httpmethod
{
    get
    {
        return this._httpmethodField;
    }
}

private global::System.Collections.Generic.Dictionary<string,string> _headersField;

/// <summary>
/// Access the headers parameter of the template.
/// </summary>
private global::System.Collections.Generic.Dictionary<string,string> headers
{
    get
    {
        return this._headersField;
    }
}


public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool uriValueAcquired = false;
if (this.Session.ContainsKey("uri"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["uri"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'uri\' did not match the type of the dat" +
                "a passed to the template.");
    }
    else
    {
        this._uriField = ((string)(this.Session["uri"]));
        uriValueAcquired = true;
    }
}
if ((uriValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("uri");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'uri\' did not match the type of the dat" +
                    "a passed to the template.");
        }
        else
        {
            this._uriField = ((string)(data));
        }
    }
}
bool hostValueAcquired = false;
if (this.Session.ContainsKey("host"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["host"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'host\' did not match the type of the da" +
                "ta passed to the template.");
    }
    else
    {
        this._hostField = ((string)(this.Session["host"]));
        hostValueAcquired = true;
    }
}
if ((hostValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("host");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'host\' did not match the type of the da" +
                    "ta passed to the template.");
        }
        else
        {
            this._hostField = ((string)(data));
        }
    }
}
bool httpmethodValueAcquired = false;
if (this.Session.ContainsKey("httpmethod"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["httpmethod"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'httpmethod\' did not match the type of " +
                "the data passed to the template.");
    }
    else
    {
        this._httpmethodField = ((string)(this.Session["httpmethod"]));
        httpmethodValueAcquired = true;
    }
}
if ((httpmethodValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("httpmethod");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'httpmethod\' did not match the type of " +
                    "the data passed to the template.");
        }
        else
        {
            this._httpmethodField = ((string)(data));
        }
    }
}
bool headersValueAcquired = false;
if (this.Session.ContainsKey("headers"))
{
    if ((typeof(global::System.Collections.Generic.Dictionary<string,string>).IsAssignableFrom(this.Session["headers"].GetType()) == false))
    {
        this.Error("The type \'System.Collections.Generic.Dictionary<string,string>\' of the parameter " +
                "\'headers\' did not match the type of the data passed to the template.");
    }
    else
    {
        this._headersField = ((global::System.Collections.Generic.Dictionary<string,string>)(this.Session["headers"]));
        headersValueAcquired = true;
    }
}
if ((headersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("headers");
    if ((data != null))
    {
        if ((typeof(global::System.Collections.Generic.Dictionary<string,string>).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Collections.Generic.Dictionary<string,string>\' of the parameter " +
                    "\'headers\' did not match the type of the data passed to the template.");
        }
        else
        {
            this._headersField = ((global::System.Collections.Generic.Dictionary<string,string>)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class GenerateCodeBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
